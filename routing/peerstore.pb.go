// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/peerstore.proto

package routing

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PeerList struct {
	Peers                []*PeerItem `protobuf:"bytes,1,rep,name=Peers,proto3" json:"Peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PeerList) Reset()         { *m = PeerList{} }
func (m *PeerList) String() string { return proto.CompactTextString(m) }
func (*PeerList) ProtoMessage()    {}
func (*PeerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0340108f399bd681, []int{0}
}

func (m *PeerList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerList.Unmarshal(m, b)
}
func (m *PeerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerList.Marshal(b, m, deterministic)
}
func (m *PeerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerList.Merge(m, src)
}
func (m *PeerList) XXX_Size() int {
	return xxx_messageInfo_PeerList.Size(m)
}
func (m *PeerList) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerList.DiscardUnknown(m)
}

var xxx_messageInfo_PeerList proto.InternalMessageInfo

func (m *PeerList) GetPeers() []*PeerItem {
	if m != nil {
		return m.Peers
	}
	return nil
}

type PeerItem struct {
	PeerID               []byte   `protobuf:"bytes,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	Listeners            []byte   `protobuf:"bytes,2,opt,name=Listeners,proto3" json:"Listeners,omitempty"`
	Timestamp            uint64   `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerItem) Reset()         { *m = PeerItem{} }
func (m *PeerItem) String() string { return proto.CompactTextString(m) }
func (*PeerItem) ProtoMessage()    {}
func (*PeerItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0340108f399bd681, []int{1}
}

func (m *PeerItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerItem.Unmarshal(m, b)
}
func (m *PeerItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerItem.Marshal(b, m, deterministic)
}
func (m *PeerItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerItem.Merge(m, src)
}
func (m *PeerItem) XXX_Size() int {
	return xxx_messageInfo_PeerItem.Size(m)
}
func (m *PeerItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerItem.DiscardUnknown(m)
}

var xxx_messageInfo_PeerItem proto.InternalMessageInfo

func (m *PeerItem) GetPeerID() []byte {
	if m != nil {
		return m.PeerID
	}
	return nil
}

func (m *PeerItem) GetListeners() []byte {
	if m != nil {
		return m.Listeners
	}
	return nil
}

func (m *PeerItem) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*PeerList)(nil), "main.PeerList")
	proto.RegisterType((*PeerItem)(nil), "main.PeerItem")
}

func init() { proto.RegisterFile("pb/peerstore.proto", fileDescriptor_0340108f399bd681) }

var fileDescriptor_0340108f399bd681 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x48, 0xd2, 0x2f,
	0x48, 0x4d, 0x2d, 0x2a, 0x2e, 0xc9, 0x2f, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0x32, 0xe0, 0xe2, 0x08, 0x48, 0x4d, 0x2d, 0xf2, 0xc9, 0x2c, 0x2e,
	0x11, 0x52, 0xe1, 0x62, 0x05, 0xb1, 0x8b, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0xf8, 0xf4,
	0x40, 0x2a, 0xf4, 0x40, 0x42, 0x9e, 0x25, 0xa9, 0xb9, 0x41, 0x10, 0x49, 0xa5, 0x38, 0x88, 0x0e,
	0x90, 0x90, 0x90, 0x18, 0x17, 0x1b, 0x98, 0xed, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13, 0x04,
	0xe5, 0x09, 0xc9, 0x70, 0x71, 0x82, 0x4c, 0x4c, 0xcd, 0x03, 0x99, 0xc6, 0x04, 0x96, 0x42, 0x08,
	0x80, 0x64, 0x43, 0x32, 0x73, 0x53, 0x8b, 0x4b, 0x12, 0x73, 0x0b, 0x24, 0x98, 0x15, 0x18, 0x35,
	0x58, 0x82, 0x10, 0x02, 0x49, 0x6c, 0x60, 0xe7, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf6,
	0x87, 0x62, 0x1d, 0xb4, 0x00, 0x00, 0x00,
}
